{"ast":null,"code":"import fs from 'fs';\nimport path from 'path';\nconst getTemplates = async () => {\n  const templatesDirectory = \"/Users/christiannogueras/Documents/Personal projects/templates\";\n  const templateFolders = await fs.promises.readdir(templatesDirectory);\n  const templates = await Promise.all(templateFolders.map(folderName => getTemplateData(folderName, templatesDirectory)));\n\n  // if the template is null, it means it's not a directory, so we filter it out.\n  return templates.filter(template => template !== null);\n};\nconst getTemplateData = async (folderName, templatesDirectory) => {\n  const folderPath = path.join(templatesDirectory, folderName);\n  const stat = await fs.promises.stat(folderPath);\n  if (!stat.isDirectory()) {\n    return null;\n  }\n  return {\n    name: folderName,\n    folder: folderPath\n  };\n};\nexport default getTemplates;","map":{"version":3,"names":["fs","path","getTemplates","templatesDirectory","templateFolders","promises","readdir","templates","Promise","all","map","folderName","getTemplateData","filter","template","folderPath","join","stat","isDirectory","name","folder"],"sources":["/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/node_modules/generate-template-shared-logic/getTemplate.js"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nconst getTemplates = async () => {\n  const templatesDirectory = \"/Users/christiannogueras/Documents/Personal projects/templates\"\n  const templateFolders = await fs.promises.readdir(templatesDirectory);\n\n  const templates = await Promise.all(templateFolders.map((folderName) => getTemplateData(folderName, templatesDirectory)));\n\n  // if the template is null, it means it's not a directory, so we filter it out.\n  return templates.filter((template) => template !== null);\n}\n\nconst getTemplateData = async (folderName, templatesDirectory) => {\n  const folderPath = path.join(templatesDirectory, folderName);\n  const stat = await fs.promises.stat(folderPath);\n\n  if (!stat.isDirectory()) {\n    return null;\n  }\n\n  return {\n    name: folderName,\n    folder: folderPath,\n  };\n}\n\n\nexport default getTemplates;\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,IAAI;AACnB,OAAOC,IAAI,MAAM,MAAM;AAEvB,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAMC,kBAAkB,GAAG,gEAAgE;EAC3F,MAAMC,eAAe,GAAG,MAAMJ,EAAE,CAACK,QAAQ,CAACC,OAAO,CAACH,kBAAkB,CAAC;EAErE,MAAMI,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACL,eAAe,CAACM,GAAG,CAAEC,UAAU,IAAKC,eAAe,CAACD,UAAU,EAAER,kBAAkB,CAAC,CAAC,CAAC;;EAEzH;EACA,OAAOI,SAAS,CAACM,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,KAAK,IAAI,CAAC;AAC1D,CAAC;AAED,MAAMF,eAAe,GAAG,MAAAA,CAAOD,UAAU,EAAER,kBAAkB,KAAK;EAChE,MAAMY,UAAU,GAAGd,IAAI,CAACe,IAAI,CAACb,kBAAkB,EAAEQ,UAAU,CAAC;EAC5D,MAAMM,IAAI,GAAG,MAAMjB,EAAE,CAACK,QAAQ,CAACY,IAAI,CAACF,UAAU,CAAC;EAE/C,IAAI,CAACE,IAAI,CAACC,WAAW,EAAE,EAAE;IACvB,OAAO,IAAI;EACb;EAEA,OAAO;IACLC,IAAI,EAAER,UAAU;IAChBS,MAAM,EAAEL;EACV,CAAC;AACH,CAAC;AAGD,eAAeb,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}