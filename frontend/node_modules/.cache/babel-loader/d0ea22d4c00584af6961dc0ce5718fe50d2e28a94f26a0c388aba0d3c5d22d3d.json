{"ast":null,"code":"let send = () => {};\nlet on = () => {};\nlet invoke = () => {};\n\n// If we are in the electron environment, we can use the electronAPI.\n// otherwise, don't throw an error on the the web browser.\nif (window.electronAPI) {\n  // this is not the same as the ipcRenderer.send() function\n  // since we filter out the channels that are not allowed.\n  send = window.electronAPI.whitelistedSend;\n  on = window.electronAPI.whitelistedOn;\n  invoke = window.electronAPI.whitelistedInvoke;\n}\n\n// These names indicate that the messages being sent and received are \n// restricted to whitelisted channels, \n// making it clearer that there's a level of filtering involved.\nexport function sendWhitelistedMessageToMain(message, data) {\n  send(message, data);\n}\nexport function subscribeToWhitelistedMessageFromMain(message, callback) {\n  on(message, callback);\n}\nex;","map":{"version":3,"names":["send","on","invoke","window","electronAPI","whitelistedSend","whitelistedOn","whitelistedInvoke","sendWhitelistedMessageToMain","message","data","subscribeToWhitelistedMessageFromMain","callback","ex"],"sources":["/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/service/electron.js"],"sourcesContent":["let send = () => {};\nlet on = () => {};\nlet invoke = () => {};\n\n// If we are in the electron environment, we can use the electronAPI.\n// otherwise, don't throw an error on the the web browser.\nif (window.electronAPI) {\n  // this is not the same as the ipcRenderer.send() function\n  // since we filter out the channels that are not allowed.\n  send = window.electronAPI.whitelistedSend;\n  on = window.electronAPI.whitelistedOn;\n  invoke = window.electronAPI.whitelistedInvoke;\n}\n\n// These names indicate that the messages being sent and received are \n// restricted to whitelisted channels, \n// making it clearer that there's a level of filtering involved.\nexport function sendWhitelistedMessageToMain(message, data) {\n  send(message, data);\n}\n\nexport function subscribeToWhitelistedMessageFromMain(message, callback) {\n  on(message, callback);\n}\n\nex\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGA,CAAA,KAAM,CAAC,CAAC;AACnB,IAAIC,EAAE,GAAGA,CAAA,KAAM,CAAC,CAAC;AACjB,IAAIC,MAAM,GAAGA,CAAA,KAAM,CAAC,CAAC;;AAErB;AACA;AACA,IAAIC,MAAM,CAACC,WAAW,EAAE;EACtB;EACA;EACAJ,IAAI,GAAGG,MAAM,CAACC,WAAW,CAACC,eAAe;EACzCJ,EAAE,GAAGE,MAAM,CAACC,WAAW,CAACE,aAAa;EACrCJ,MAAM,GAAGC,MAAM,CAACC,WAAW,CAACG,iBAAiB;AAC/C;;AAEA;AACA;AACA;AACA,OAAO,SAASC,4BAA4BA,CAACC,OAAO,EAAEC,IAAI,EAAE;EAC1DV,IAAI,CAACS,OAAO,EAAEC,IAAI,CAAC;AACrB;AAEA,OAAO,SAASC,qCAAqCA,CAACF,OAAO,EAAEG,QAAQ,EAAE;EACvEX,EAAE,CAACQ,OAAO,EAAEG,QAAQ,CAAC;AACvB;AAEAC,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}