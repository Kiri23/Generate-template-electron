[{"/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/index.tsx":"1","/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/reportWebVitals.ts":"2","/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/App.tsx":"3","/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/MainPage.tsx":"4","/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/service/electron.js":"5"},{"size":554,"mtime":1681414483847,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1681414483848,"results":"8","hashOfConfig":"7"},{"size":269,"mtime":1681448395193,"results":"9","hashOfConfig":"7"},{"size":3878,"mtime":1681765804538,"results":"10","hashOfConfig":"7"},{"size":430,"mtime":1681767248210,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1g8teum",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/index.tsx",[],[],[],"/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/reportWebVitals.ts",[],[],"/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/App.tsx",[],[],"/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/MainPage.tsx",["29"],[],"import {\n  Button,\n  VStack,\n  Box,\n  Text,\n  Heading,\n  Input,\n  List,\n  ListItem,\n  Icon,\n  useToast,\n  Collapse,\n  Tooltip\n} from \"@chakra-ui/react\";\nimport { CheckIcon, AttachmentIcon, WarningIcon } from \"@chakra-ui/icons\";\nimport React, { useState } from \"react\";\nimport { sendMessageToMain, subscribeToMessageFromMain } from \"./service/electron\";\nimport EVENTS from \"../../events.json\"\n\nconst templates = [\"SlackBot\", \"FastAPI\", \"CLI tool\"];\n\nconst MainPage = () => {\n  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);\n  const [destination, setDestination] = useState<string | null>(null);\n  const toast = useToast();\n\n  const handleTemplateClick = (template: string) => {\n    setSelectedTemplate((prevSelectedTemplate) =>\n      prevSelectedTemplate === template ? null : template\n    );\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      setDestination(e.target.files[0].path);\n    }\n  };\n\n  const handleChooseDestinationClick = () => {\n    document.getElementById(\"destination-input\")?.click();\n  };\n\n  const handleDuplicateClick = async () => {\n    console.log(destination)\n    console.log(selectedTemplate)\n    sendMessageToMain(EVENTS[\"duplicate-template\"], { selectedTemplate, destination });\n    // await template.duplicateTemplate(selectedTemplate, destination)\n    toast({\n      title: \"Template duplicated\",\n      description: `Template ${selectedTemplate} has been duplicated to ${destination}`,\n      status: \"success\",\n      duration: 5000,\n      isClosable: true,\n    });\n  };\n\n  return (\n    <VStack\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      spacing={10}\n      minHeight=\"100vh\"\n      className=\"main-page\"\n    >\n      <VStack alignItems=\"center\" spacing={4}>\n        <Heading as=\"h1\" size=\"2xl\">\n          Template Duplicator\n        </Heading>\n        <Text fontSize=\"lg\" textAlign=\"center\">\n          Select a project template and choose a destination to create a duplicate. Get started with a pre-configured template for SlackBot, FastAPI, CLI tool, and more.\n        </Text>\n      </VStack>\n      <Box>\n        <Text fontSize=\"xl\" mb={4}>\n          Select the template you want to duplicate\n        </Text>\n        <List spacing={4}>\n          {templates.map((template) => (\n            <ListItem\n              key={template}\n              p={4}\n              borderWidth={1}\n              borderRadius=\"lg\"\n              borderColor=\"gray.300\"\n              _hover={{ bg: \"gray.100\" }}\n              cursor=\"pointer\"\n              className={`list-item ${selectedTemplate === template ? \"selected\" : \"\"}`}\n              onClick={() => handleTemplateClick(template)}\n            >\n              {template}\n              <Collapse in={selectedTemplate === template} animateOpacity>\n                <Icon as={CheckIcon} ml={2} />\n              </Collapse>\n            </ListItem>\n          ))}\n        </List>\n      </Box>\n      <Button\n        leftIcon={<AttachmentIcon />}\n        onClick={handleChooseDestinationClick}\n        colorScheme=\"blue\"\n        className=\"button\"\n      >\n        Choose destination\n      </Button>\n      <Input\n        type=\"file\"\n        accept=\"directory\"\n        onChange={handleFileChange}\n        display=\"none\"\n        id=\"destination-input\"\n      />\n      <Button\n        leftIcon={<CheckIcon />}\n        onClick={handleDuplicateClick}\n        isDisabled={selectedTemplate === null || destination === null}\n        colorScheme=\"blue\"\n        className=\"button\" >\n        Duplicate\n        {selectedTemplate === null || destination === null ? (\n          <Tooltip label=\"Please select a template and a destination\" placement=\"top\">\n            <Icon as={WarningIcon} ml={2} />\n          </Tooltip>\n        ) : null}\n      </Button>\n    </VStack>\n  );\n};\n\nexport default MainPage;\n","/Users/christiannogueras/Documents/Personal projects/Electron projects/generate-templates/frontend/src/service/electron.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":17,"column":29,"nodeType":"32","messageId":"33","endLine":17,"endColumn":55},"@typescript-eslint/no-unused-vars","'subscribeToMessageFromMain' is defined but never used.","Identifier","unusedVar"]